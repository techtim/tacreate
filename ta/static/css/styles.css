/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
@import url(https://fonts.googleapis.com/css?family=PT+Sans&subset=latin,cyrillic);
@import url(https://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700,300italic,400italic&subset=latin,cyrillic);

html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
  padding-top: 0px;
  line-height: 1;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  margin-bottom: 50px;
  font-size: 44px;
  letter-spacing: 0.05em;
  font-family: 'Open Sans', sans-serif;
  font-weight: 300;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
  margin: 25px auto 25px;
}

/**
 * Correct overflow not hidden in IE 9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

td,
th {
  padding: 0;
}

.navigation {
  margin: 0 auto 72px auto;
  padding-top: 14px;
  width: 1170px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
  font-size: 15px;
  /*font-weight: bold;
  letter-spacing: 0.1em;*/

}
.navigation__site-links {
  width: 768px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
  -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
          justify-content: space-between;
}
.navigation__site-link {
  color: #000000;
  text-decoration: none;
  text-transform: uppercase;
}
.navigation__site-link:hover {
  text-decoration: underline;
}
.navigation__site-link--is-current {
  position: relative;
}
.navigation__site-link--is-current:before {
  position: absolute;
  top: -22px;
  left: -19px;
  color: #cc0000;
  content: '\2219';
  font-family: Georgia;
  font-size: 50px;
}
.navigation__lang-link {
  margin-right: 34px;
  color: #ccc;
  text-decoration: none;
}
.navigation__lang-link:hover {
  text-decoration: underline;
}
.navigation__misc-links {
  margin-left: auto;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}
.navigation__social-link {
  margin-right: 5px;
  width: 16px;
  height: 16px;
  color: #ccc;
  text-decoration: none;
}
.navigation__social-link > svg {
  width: 16px;
  height: 16px;
}

.navigation__social-link:last-of-type {
  margin-right: 0;
}

.content-block {
  margin: 0 auto;
  width: 1170px;
}
.content-block:after {
  content: "";
  display: table;
  clear: both;
}
.content-block__left-side {
  width: 700px;
  float: left;
}
.content-block__left-side--collapsed {
  width: 368px;
}
.content-block__right-side {
  width: 368px;
  float: right;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column;
}
.content-block__right-side--wide {
  width: 672px;
}
.content-block__caption {
  margin-bottom: 50px;
  font-size: 48px;
}
.content-block a[href*='//']:not([href*='localhost']):not([href^='tel']) {
  color: #cc0000;
}
.content-block a[href*='//']:not([href*='localhost']):not([href^='tel']):hover {
  text-decoration: none;
}
.content-block a[href^='tel'] {
  color: currentColor;
  text-decoration: none;
}
.content-block p {
  margin: 0 0 12px;
  color: #333;
  font-size: 15px;
  line-height: 19px;
}
.content-block p:last-of-type {
  margin-bottom: 0;
}
.content-block p.contacts {
  margin-bottom: 6px;
}
.content-block p.contacts:last-of-type {
  margin-bottom: 66px;
}
.content-block__image-with-description {
  margin-bottom: 7px;
}
.content-block__image-description {
  margin-bottom: 70px;
  width: 368px;
  -webkit-align-self: flex-end;
      -ms-flex-item-align: end;
          align-self: flex-end;
  color: #999999;
  font-family: Georgia, serif;
  font-size: 14px;
  font-style: italic;
  line-height: 17px;
  text-align: right;
}

.vertical-list {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column;
}
.vertical-list--carousel {
  position: relative;
  margin-top: 85px;
  height: 380px;
}
.vertical-list__item {
  margin-bottom: 20px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}
.vertical-list__item:last-of-type {
  margin-bottom: 0;
}
.vertical-list__items-wrapper {
  position: relative;
  height: 380px;
  overflow: hidden;
}
.vertical-list .carousel-wrapper {
  position: absolute;
}
.vertical-list__controls {
  position: absolute;
  left: 50%;
  height: 26px;
  width: 88px;
  cursor: pointer;
  -webkit-transform: rotate(90deg);
          transform: rotate(90deg);
}
.vertical-list__controls--prev {
  top: -41px;
  margin-left: 0;
}
.vertical-list__controls--next {
  bottom: -46px;
  margin-left: -62px;
  -webkit-transform: rotate(-90deg);
          transform: rotate(-90deg);
}
.vertical-list__controls.inactive {
  display: none;
}
.vertical-list__image {
  margin-right: 20px;
  width: 80px;
  height: 80px;
  border-radius: 50% 50%;
}
.vertical-list__text-wrapper {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
      -ms-flex-pack: center;
          justify-content: center;
}
.vertical-list__caption {
  color: #333333;
  font-size: 18px;
}
.vertical-list__description {
  color: #999999;
  font-size: 15px;
}

.horizontal-list {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column;
}
.horizontal-list__caption {
  margin-bottom: 5px;
  color: #000000;
  font-size: 15px;
}
.horizontal-list__list-link {
  margin-right: 24px;
  color: #cc0000;
  font-size: 15px;
}
.horizontal-list__list-link:hover {
  text-decoration: none;
}

.filters {
  margin-top: -22px;
  margin-bottom: 110px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-align: center;
  -webkit-align-items: center;
      -ms-flex-align: center;
          align-items: center;
}
.filters__item {
  margin-right: 40px;
  border-bottom: 1px solid #c8c8c8;
  color: #000000;
  font-size: 24px;
  text-decoration: none;
}
.filters__item:hover {
  margin-top: -1px;
  border-bottom: 0;
}
.filters__item--is-current {
  position: relative;
  border-bottom: 0;
}
.filters__item--is-current:before {
  position: absolute;
  top: -19px;
  left: -19px;
  color: #cc0000;
  content: '\2219';
  font-family: Georgia;
  font-size: 56px;
}
.filters__sub-filters {
  margin-left: auto;
}
.filters__sub-filter-item {
  margin-left: 52px;
  border-bottom: 1px solid currentColor;
  color: #999999;
  font-size: 18px;
  text-decoration: none;
}
.filters__sub-filter-item:hover {
  border-bottom: 0;
}
.filters__sub-filter-item:first-child {
  margin-left: 0;
}

.horizontal-carousel {
  position: relative;
  height: 638px;
  width: 1170px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}
.horizontal-carousel__items-wrapper {
  position: relative;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  width: 100%;
  overflow: hidden;
}
.horizontal-carousel .carousel-wrapper {
  position: absolute;
  width: 1170px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
}
.horizontal-carousel__controls {
  position: absolute;
  top: 50%;
  margin-top: -44px;
  height: 88px;
  width: 26px;
  cursor: pointer;
}
.horizontal-carousel__controls > svg {
  height: inherit;
  width: inherit;
}
.horizontal-carousel__controls--prev {
  left: -70px;
}
.horizontal-carousel__controls--next {
  right: -70px;
  -webkit-transform: rotate(180deg);
          transform: rotate(180deg);
}
.horizontal-carousel__controls.inactive {
  display: none;
}
.horizontal-carousel__item {
  margin-right: 30px;
  width: 270px;
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-flex: 0;
  -webkit-flex: 0 0 270px;
      -ms-flex: 0 0 270px;
          flex: 0 0 270px;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
  -webkit-flex-direction: column;
      -ms-flex-direction: column;
          flex-direction: column;
  text-decoration: none;
}
.horizontal-carousel__item:last-of-type {
  margin-right: 0;
}
.horizontal-carousel__preview {
  margin-bottom: 35px;
  width: 270px;
  height: 270px;
  border-radius: 50% 50%;
  background: #cc0000;
}
.horizontal-carousel__preview > img {
  width: 100%;
  height: 100%;
}
.horizontal-carousel__date {
  margin-bottom: 2px;
  color: #999999;
  font-size: 14px;
  text-decoration: none;
}
.horizontal-carousel__caption {
  padding-bottom: 32px;
  color: #cc0000;
  font-size: 24px;
}
.horizontal-carousel__caption > a {
  color: currentColor;
}
.horizontal-carousel__caption .horizontal-carousel__text-wrapper {
  border-bottom: 1px solid currentColor;
}
.horizontal-carousel__description {
  color: #333333;
  font-size: 15px;
  line-height: 19px;
}

body {
  width: 100%;
  background: #ffffff;
  color: #333;
  font-family: 'PT Sans', sans-serif;
  font-weight: 400;
  /*letter-spacing: .01em;*/
  overflow-x: hidden;
}

.logo {
  margin-top: 60px;
  margin-right: 40px;
  display: block;
  min-width: 800px;
}

.logo svg {
  float: right;
  height: 60px;
}

.horizontal-line {
  position: absolute;
  margin-top: 60px;
  margin-right: 40px;
  width: 1920px;
  float: right;
  border-width: 1px;
  border-color: #CCCCCC;
   border-top-style: solid;
   display: block;
}

.big-image {
  margin: 55px auto 52px;
}

.text-in-columns {
  padding-bottom: 38px;
  -webkit-columns: 360px 3;
     -moz-columns: 360px 3;
          columns: 360px 3;
  -webkit-column-gap: 40px;
     -moz-column-gap: 40px;
          column-gap: 40px;
  font-size: 15px;
}

.quote {
  margin-bottom: 38px;
  padding: 18px 0;
  border-top: 1px solid #999;
  border-bottom: 1px solid #999;
  color: #333333;
  font-family: Georgia, serif;
  font-size: 36px;
  font-style: italic;
  line-height: 45px;
}

.footer {
  margin: 240px auto 0;
  width: 1170px;
  color: #cccccc;
  font-size: 12px;
  text-align: right;
}



/*# sourceMappingURL=data:application/json;base64, */

/*# sourceMappingURL=data:application/json;base64, */
